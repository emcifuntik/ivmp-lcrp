//--------------------Liberty City DM - Money Grub by iGeTT-------------------------

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////EasyINI/////////////////////////////////////////////////////
///////////////////////////////////////////////10x to Jones///////////////////////////////////////////////////
class
	EasyINI
{
	lastsec = null;
	sections = {};
	filename = "";
	
	constructor(fname)
	{
		filename = fname;
		fileCreate(fname);
		local
			tf = eFile(fname, "r");
		sections.clear();
		lastsec = null;
		while(!tf.eos())
		{
			local
				line = tf.readline(),
				res = regexp(@"\[[\C]+]").search(line);
			
			if(!line.len() || line[0] == ';')
			{
				continue;
			}
				
			if(res != null)
			{
				local
					secname = line.slice(res.begin+1, res.end-1);
				if(findSection(secname) == null)
				{
					createSection(secname);
				}				
				lastsec = secname;
				continue;
			}
			
			if(lastsec == null)
			{
				continue;
			}
			
			res = regexp("=").search(line);
			if(res != null)
			{
				setKey(lastsec, line.slice(0, res.begin), line.slice(res.end));
			}			
		}
	}
	
	/*
	 * Internal Methods
	 */
	 
	function
		createSection(name)
	{
		return (sections[name] <- {});
	}
	
	function
		findSection(name)
	{
		if(sections.rawin(name))
		{
			return sections[name];
		}
		return null;
	}
	
	function
		createKey(section, key, val)
	{
		if(findSection(section) != null)
		{
			sections[section][key] <- val;
			return true;
		}
		else
		{
			createSection(section);
			local
				s = findSection(section);
			if(s == null)
			{
				log("Some serious shit happened. Tell the scripter about that.");
				return false;
			}
			s[key] <- val;
			return true;
		}
		return false;
	}
	
	/*
	 * Public Methods
	 */
	 
	function
		keyExists(section, key)
	{
		local
			s = findSection(section);
		if(s == null)
		{
			return false;
		}
		return (s.rawin(key));
	}
	
	function
		setKey(section, key, val)
	{
		if(val == null)
		{
			throw "EasyINI Exception: Value must not be null!";
		}
		if(!keyExists(section, key))
		{
			createKey(section, key, val.tostring());
		}
		else
		{
			findSection(section)[key] <- val.tostring();
		}
	}
	
	function
		getKey(section, key)
	{
		if(!keyExists(section, key))
		{
			return null;
		}
		return sections[section][key];		
	}
	
	function
		deleteKey(section, key)
	{
		if(!keyExists(section, key))
		{
			return false;
		}
		return delete sections[section][key];
	}
	
	function
		deleteSection(name)
	{
		if(findSection(name) == null)
		{
			return false;
		}
		return delete sections[name];
	}
	
	function
		logData()
	{
		foreach(i,s in sections)
		{
			log("[" + i + "]");
			foreach(j,k in s)
			{
				log(j + "=" + k);
			}
		}
	}
	
	function
		reloadData()
	{
		sections.clear();
		lastsec = null;
		local
			tf = eFile(fname, "r");
		while(!tf.eos())
		{
			local
				line = tf.readline();
				res = regexp(@"\[[\C]+]").secReg.search(line);
			
			if(!line.len() || line[0] == ';')
			{
				continue;
			}
				
			if(res != null)
			{
				local
					secname = line.slice(res.begin+1, res.end-1);
				if(findSection(secname) == null)
				{
					createSection(secname);
				}				
				lastsec = secname;
				continue;
			}
			if(lastsec == null)
			{
				continue;
			}
			res = regexp("=").secReg.search(line);
			if(res != null)
			{
				setKey(lastsec, line.slice(0, res.begin), line.slice(res.end));
			}
		}		
	}
	
	function
		saveData()
	{
		local tf = eFile(filename, "w");
		//tf.writeline(";File generated by EasyINI");////// I'm sorry :C	
		foreach(i,s in sections)
		{
			tf.writeline("[" + i + "]");
			foreach(j,k in s)
			{
				tf.writeline(j + "=" + k);
			}
		}		
	}
}

function
	fileCreate(filename)
{
	local tf = file(filename, "a+");
	tf = null;
	return true;
}

class
	eFile extends file
{
	function
		readline()
	{
		local
			result = "";
		while(!this.eos())
		{
			local
				c = this.readn('c');
			if(c == '\n' || !c)
			{
				return result;
			}
			if(c == '\r')
			{
				continue;
			}
			result += c.tochar();
		}
		return result;
	}
	function
		writeline(line)
	{
		foreach(char in line)
		{
			this.writen(char, 'c');
		}
		this.writen('\n', 'c');
	}
}

const MAX_CARS = 5000;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////Colours/////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
const colorWhite = 0xFFFFFFFF;
const colorBlack = 0x000000AA;
const colorRed = 0xFF0000AA; //Used for players states
const colorGray = 0x808080AA; //Used for system messages
const colorBlue = 0x0000FFFF;
const colorYellow = 0xFFFF00FF; //Used for log/reg messages
const colorLightBlue = 0x00FFFFFF;
const colorPink = 0xFF00FFFF;
const colorOrange = 0xFF8000FF;
const colorGreen = 0x00FF00FF; //Used for help

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////Weapons/////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
local wName = array(11, "");
local wID = array(11, 0);
local wCap = array(11, 0);
local wCost = array(11, 0);

wName = [ "Grenade" , "Molotov" , "Pistol" , "Combat Pistol" , "Pump Shotgun" , "Combat Shotgun" , "Micro SMG" , "SMG" , "AK 47" , "M4A1" , "Combat Sniper" , "Sniper Rifle" ];
wID   = [     4     ,     5     ,    7     ,        9        ,       10       ,        11        ,      12     ,   13  ,    14   ,   15   ,       16        ,       17       ];
wCap  = [     1     ,     1     ,   17     ,        9        ,        8       ,        10        ,      50     ,   30  ,    30   ,   30   ,       10        ,        5       ];
wCost = [    500    ,    500    ,   500    ,       1000      ,       2000     ,       2000       ,     2500    ,  2500 ,   3000  ,  3000  ,      3500       ,      3500      ];

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////PlayerVariables////////////////////////////////////////////////
/////////////////////////////////////////////(Arrays, i like it)//////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
local isLog = array(getPlayerSlots(), false);
local isAdm = array(getPlayerSlots(), false);
local inChk = array(getPlayerSlots(), false);
local shownShop = array(getPlayerSlots(), false);
local pCar1 = array(getPlayerSlots(), 0);
local pCar2 = array(getPlayerSlots(), 0);
local pCar3 = array(getPlayerSlots(), 0);
local pCarSeller = array(getPlayerSlots(), 0);
local pCarPrice = array(getPlayerSlots(), 0);
local pCarColor1 = array(getPlayerSlots(), 0);
local pCarColor2 = array(getPlayerSlots(), 0);
local pCarColor3 = array(getPlayerSlots(), 0);
local pCarColor4 = array(getPlayerSlots(), 0);
local pCarModel = array(getPlayerSlots(), 0);
local pJob = array(getPlayerSlots(), 0);
local pFaction = array(getPlayerSlots(), 0);
local pSkill = array(getPlayerSlots(), 0);
local pRank = array(getPlayerSlots(), 0);
local pMoney = array(getPlayerSlots(), 0);

const startMoney = 500; //Spawn money
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////Auto system////////////////////////////////////////////////////////////////////
local cCarID = array(MAX_CARS, -1);
local cCarModel = array(MAX_CARS, 0);
local cCarColor1 = array(MAX_CARS, 0);
local cCarColor2 = array(MAX_CARS, 0);
local cCarColor3 = array(MAX_CARS, 0);
local cCarColor4 = array(MAX_CARS, 0);
local cCarPosX = array(MAX_CARS, 0);
local cCarPosY = array(MAX_CARS, 0);
local cCarPosZ = array(MAX_CARS, 0);
local cCarAngleX = array(MAX_CARS, 0);
local cCarAngleY = array(MAX_CARS, 0);
local cCarAngleZ = array(MAX_CARS, 0);
local cCarDirtLevel = array(MAX_CARS, 0);
local cCarHealth = array(MAX_CARS, 0);
local cCarEngineHealth = array(MAX_CARS, 0);
local cCarLocked = array(MAX_CARS, 0);
local cCarParked = array(MAX_CARS, 0);
local cCarVariation = array(MAX_CARS, 0);
local cCarSirenState = array(MAX_CARS, 0);
local cCarEngineState = array(MAX_CARS, 0);
local cCarLights = array(MAX_CARS, 0);
local cCarTaxiLights = array(MAX_CARS, 0);
//////////////////////////////////////////////Spawn locations//////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
local x = array(8, 0); //All X
local y = array(8, 0); //All Y
local z = array(8, 0); //All Z
local r = array(8, 0); //All rotate angles (R)
local number = 1; // Random Spawn Counter
    //////0//////////1/////////2//////////3//////////4//////////5///////////6/////////7//////////8/////
x = [ -110.952 , -163.114 , -194.88 , -234.404 , -205.073 , -181.103 , -172.214 , -232.202 , -240.176 ];
y = [  1029.49 ,  963.394 , 879.012 ,   796.39 ,  677.442 ,  837.727 ,  1128.01 ,  1042.59 ,  960.049 ];
z = [  6.42239 ,  7.16407 , 6.22637 ,  6.16371 ,  12.4091 ,  12.1416 ,  6.91143 ,  7.48755 ,  8.29855 ];
r = [  93.5452 ,    0.0   , 164.144 ,    0.0   ,     0.0  ,  95.0842 ,  174.594 ,    0.0   ,  98.3535 ];

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////fexists////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function fexists(fpath)
{
   try 
   {
      file(fpath, "r");
   }
   catch(e)
              {
              return false;
              }
   return true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////moneySave////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function moneySave()
{
  foreach(i,playername in getPlayers())
    {
      if (isLog[i] == true)
	  {
	    local ini = EasyINI ("account/"+getPlayerName(i)+".ini");
		ini.setKey("General", "Money", getPlayerMoney(i));
		ini.saveData();
	  }
    }
	log("Money successfully saved ;)");
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////changeSpawn//////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function changeSpawn(playerid)
{
  setPlayerSpawnLocation(playerid, x[number], y[number], z[number], r[number]);
  number = number + 1;
  if (number == 9)
  {
    number = 0;
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////CheckPoints (for gunShop)////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function spawnCheckPoints() //Create CheckPoints
{
  createCheckpoint(3, -125.838, 720.487, 14.5, -125.838, 720.487, 14.5, 1.5);
  createCheckpoint(3, -157.043, 1120.21, 7.0, -157.043, 1120.21, 7.0, 1.5);
  createCheckpoint(3, -231.457, 966.914, 7.5, -231.457, 966.914, 7.5, 1.5);
  createCheckpoint(3, -318.594, 795.71, 11.0, -318.594, 795.71, 11.0, 1.5);
  showCheckPoints();
  createBlip(59, -125.838, 720.487, 14.5);
  createBlip(59, -157.043, 1120.21, 7.0);
  createBlip(59, -231.457, 966.914, 7.5);
  createBlip(59, -318.594, 795.71, 11.0);
}

function showCheckPoints() //Makes CheckPoints Visible
{
  showCheckpointForAll(0);
  showCheckpointForAll(1);
  showCheckpointForAll(2);
  showCheckpointForAll(3);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////Registration//////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function playerRegister(playerid, password)
{
  //Is logined?
  if (isLog[playerid] == true)
  {
    return 2;
  }
  else
  {
    //Is registered?
	if (fexists("account/"+getPlayerName(playerid)+".ini") == true)
    {
      return 1;
    }
    else
      {
        //I will work with *PlayerName*.ini, in folder "account"
		local ini = EasyINI ("account/"+getPlayerName(playerid)+".ini");
		//Write there md5 password, admin-state and money
        ini.setKey("General", "Password", md5(password));
	    ini.setKey("General", "isAdm", false);
		ini.setKey("General", "Money", getPlayerMoney(playerid));
		//Save
        ini.saveData();
		//Login
        isLog[playerid] = true;
	    return 0;
      }
	}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////Login////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function playerLogin(playerid, password)
{
  //Is logined?
  if (isLog[playerid] == true)
  {
    return 3;
  }
  else
  {
    //Is registered?
	if (fexists("account/"+getPlayerName(playerid)+".ini") == true)
    {
      //I will work with *PlayerName*.ini, in folder "account"
	  local ini = EasyINI ("account/"+getPlayerName(playerid)+".ini");
	  //Check password
	  if (md5(password) == ini.getKey("General", "Password"))
      {
	    //Read admin-state
		isLog[playerid] = true;
		isAdm[playerid] = ini.getKey("General", "isAdm");
		givePlayerMoney(playerid, ini.getKey("General", "Money").tointeger());
		//Returns "All Right"
		return 0;
	  }
	  //Returns "Incorrect password"
	  else return 1;
	  //Finish work with file
	  ini.saveData();
    }
	//Returns "Isn't registered"
    else return 2;
  }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////ScriptInit//////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function onScriptInit()
{	
    log("----------------------------------------------");
	log("-----II----GGG-----EEE----TTTTTT---TTTTTT-----");
	log("-----II---G-------EEEEE-----TT-------TT-------");
	log("-----II---G--GG---E---------TT-------TT-------");
	log("-----II----GGG-----EEE------TT-------TT-------");
	log("----------------------------------------------");
	log("-- Test iGeTT's Script Successfully Started --");
	log("----------------------------------------------");
	log("----------------------------------------------");
	//Spawn CheckPoints and Blips
    spawnCheckPoints();
    local moneyTimer = timer(moneySave, 60000, -1);	
    local Date = date();
    log("Start time: "+Date["hour"]+":"+Date["min"]+":"+Date["sec"]);
    setTime(Date["hour"], Date["min"]);
    setMinuteDuration(60000);
    setDayOfWeek(Date["wday"]);
    loadCars();
    return 1;
}
addEvent("scriptInit", onScriptInit);

function onScriptExit()
{
    saveCars();
    return 1;
}
addEvent("scriptExit", onScriptExit);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////PlayerConnect/////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function onPlayerConnect( playerid )
{
  log("** Player '" + getPlayerName(playerid) + "' connected to the server! **");
  //Exaple of check for bad nicks
  if (getPlayerName(playerid) == "fuck")
  {
    log("** Player '" + getPlayerName(playerid) + "' has bad nick and he was kicked from the server :( **");
	sendMessageToAll("** Player '" + getPlayerName(playerid) + "' has tried to be connected to our server with bad nick and was kicked :( **", colorRed, true);
	kickPlayer(playerid, true);
  }
  else
  {
	sendMessageToAll("** Player '" + getPlayerName(playerid) + "' successfully connected to our server ;) **", colorRed, true);
	sendPlayerMessage(playerid, "** Welcome to Liberty City MoneyGrab, " + getPlayerName(playerid) + "! **", colorRed);
	sendPlayerMessage(playerid, "** Type /help to show... help :D **", colorGreen);
	sendPlayerMessage(playerid, "** If you want to save your money, /register or /login ;) **", colorOrange);
	showCheckPoints();
	givePlayerMoney(playerid, startMoney); //Give spawnMoney
	resetPlayerMoney(playerid);
	changeSpawn(playerid);
  }
}
addEvent ("playerConnect", onPlayerConnect);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////PlayerSpawn//////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function onPlayerSpawn( playerid )
{
    //On spawn give to player knife and 300 patrons of deagle-like weapon...
    givePlayerWeapon(playerid, 3, 1);
	givePlayerWeapon(playerid, 7, 300);
	setPlayerMoney(playerid, startMoney); //...and spawnMoney
	//...and change the spawnLocation
    changeSpawn(playerid);
}
addEvent("playerSpawn", onPlayerSpawn);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////Commands///////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function onPlayerCommand(playerid, command)
{
 //Split spaces in command
 local cmd = split(command, " ");
 //Used "switch", becouse it's more useless than "if" 
 switch(cmd[0])
 {
////////////////////////////////////////////////////////////////////////////////////////////////
   case "/help":
     sendPlayerMessage(playerid, "*************", colorGreen);
	 sendPlayerMessage(playerid, "** Hey, it's Liberty City MoneyGrab server! **", colorGreen);
	 sendPlayerMessage(playerid, "** Here you can collect money, buy weapons and kill, kill, kill...  **", colorGreen);
	 sendPlayerMessage(playerid, "** You need register or login to save your money :) **", colorGreen);
	 sendPlayerMessage(playerid, "** Type /cmds to show list of avalible commands **", colorGreen);
	 sendPlayerMessage(playerid, "*************", colorGreen);
	 break;
////////////////////////////////////////////////////////////////////////////////////////////////
   case "/cmds":
     sendPlayerMessage(playerid, "*************", colorGreen);
	 sendPlayerMessage(playerid, "** Avalible commands: **", colorGreen);
	 sendPlayerMessage(playerid, "** /help /login /register /kill /weapon /weaponlist  **", colorGreen);
	 sendPlayerMessage(playerid, "*************", colorGreen);
	 //For admin show admin-commands
	 if (isAdm[playerid].tostring() == "true")
	 {
	   sendPlayerMessage(playerid, "** Admin commands: **", colorGreen);
	   sendPlayerMessage(playerid, "** /heal /sethp /setarmor /givemoney /setmoney /veh /kick /ban  **", colorGreen);
	   sendPlayerMessage(playerid, "*************", colorGreen);
	 }
	 break;
////////////////////////////////////////////////////////////////////////////////////////////////	 
   case "/kill":
     setPlayerHealth(playerid, -1);
	 break;
	case "/restart":
	 if(isAdm[playerid].tostring() == "true") 
	 {
	  reloadScript("lcdm.nut");
	  sendPlayerMessage(playerid, "Server restarting...", colorYellow);
	 }
	 break;
	 case "/offer":
	 if(cmd[1] == "car")
	 {
	     local giveplayerid = cmd[2].toint();
	     if(!isNumeric(cmd[2]) \\ cmd.len() != 2)
	     {
	         sendPlayerMessage(playerid, " USE: /offer car [playerid]");
	         break;
	     }
	     if(getPlayerMoney(giveplayerid) >= 10000)
	     {
	         showPlayerCarGUI(giveplayerid);
	         pCarSeller[giveplayerid] = playerid;
	     }
	     else
	     {
	         sendPlayerMessage(playerid, " Player ID:["+giveplayerid+"] doesn't have enough money.");
	         break;
	     }
	 }
	break;
////////////////////////////////////////////////////////////////////////////////////////////////	 
   case "/login":
     //Check for number of words
	 if (cmd.len() != 2)
	 {
	   sendPlayerMessage(playerid, "** Usage: /login [password] **", colorGray)
	 }
	 else
	 {
	   //Return to player state of login
	   switch (playerLogin(playerid, cmd[1]))
	   {
	     case 0:
		  sendPlayerMessage(playerid, "** You're successfully logged in ;) **", colorYellow);
		  break;
		 case 1:
		  sendPlayerMessage(playerid, "** Invalid password, please try again **", colorYellow);
		  break;
		 case 2:
		  sendPlayerMessage(playerid, "** You're not registered. Use /register **", colorYellow);
		  break;
		 case 3:
		  sendPlayerMessage(playerid, "** You're already loggen in :D **", colorYellow);
	   }
	 }
     break;
////////////////////////////////////////////////////////////////////////////////////////////////
   case "/register":
     //Check for number of words
	 if (cmd.len() != 2)
	 {
	   sendPlayerMessage(playerid, "** Usage: /register [password] **", colorGray)
	 }
	 else
	 {
	   //Return to player state of register
	   switch (playerRegister(playerid, cmd[1]))
	   {
		case 0:
		  sendPlayerMessage(playerid, "** You're successfully registered and logged in ;) **", colorYellow);
		  break;
		case 1:
		  sendPlayerMessage(playerid, "** You're already registered, use /login **", colorYellow);
		  break;
		case 2:
		  sendPlayerMessage(playerid, "** You're already registered and logged in :D **", colorYellow);
	   }
     break;
	 }
////////////////////////////////////////////////////////////////////////////////////////////////	 
   case "/weapon":
     if (cmd.len() == 2)
	 {
	   if (inChk[playerid] == false)
	   {
	     sendPlayerMessage(playerid, "** Sorry, you must be in CheckPoint **", colorGray);
	   }
	   else
	   {
         //If ID > 11 or < 0 then Invalid ID
		 if ((cmd[1].tointeger() > 11) || (cmd[1].tointeger() < 0)) sendPlayerMessage(playerid, "** Invalid weapon ID. Type /weaponlist to view avalible IDs **", colorGray)
		 else
		 {
		   //If player hasn't got enough money
		   if (getPlayerMoney(playerid) < wCost[cmd[1].tointeger()])
		   {
		     sendPlayerMessage(playerid, "** Sorry, not enough money. Need "+wCost[cmd[1].tointeger()]+"$ **", colorGray);
		   }
		   else
		   {
		     //Give player weapon with ID from command and ammo from arrive
			 givePlayerWeapon(playerid, wID[cmd[1].tointeger()], wCap[cmd[1].tointeger()]);
			 //Decrease player's money by Cost
			 setPlayerMoney(playerid, getPlayerMoney(playerid) - wCost[cmd[1].tointeger()]);
		   }
		 }
	   }
	 }
	 else
	 {
	   sendPlayerMessage(playerid, "** Usage: /weapon [ID] **", colorGray);
	   sendPlayerMessage(playerid, "** To show list of weapon's IDs type /weaponlist **", colorGray);
	 }
	 break;
////////////////////////////////////////////////////////////////////////////////////////////////
   case "/weaponlist":
     sendPlayerMessage(playerid, "** Weapon ID - Name (Ammo) - Cost **", colorGreen);
	 sendPlayerMessage(playerid, "** 0 - Grenade (1) - 500 ** 1 - Molotov (1) - 500 **", colorGreen);
	 sendPlayerMessage(playerid, "** 2 - Pistol (17) - 500 ** 3 - Combat Pistol (9) - 1000 **", colorGreen);
	 sendPlayerMessage(playerid, "** 4 - Pump Shotgun (8) - 2000 **", colorGreen);
	 sendPlayerMessage(playerid, "** 5 - Combat Shotgun (10) - 2000 **", colorGreen);
	 sendPlayerMessage(playerid, "** 6 - Micro SMG (50) - 2500 **", colorGreen);
	 sendPlayerMessage(playerid, "** 7 - SMG (30) - 2500 **", colorGreen);
	 sendPlayerMessage(playerid, "** 8 - AK 47 (30) - 3000 **", colorGreen);
	 sendPlayerMessage(playerid, "** 9 - M4A1 (30) - 3000 **", colorGreen);
	 sendPlayerMessage(playerid, "** 10 - Combat Sniper (10) - 3500 ** 11 - Sniper Rifle (5) - 3500 **", colorGreen);
	 break;
////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////Admin commands////////////////////////////////////////
   case "/veh":
     //Admin-state check
	 if (isAdm[playerid].tostring() == "true")
     {
	   if (cmd.len() != 2)
	   {
	     sendPlayerMessage(playerid, "** Usage: /veh [ID] **", colorGray)
	   }
	   else
	   {
	     local postemp = getPlayerCoordinates(playerid);
	     //Spawn vehicle with coordinates, increased by 5
	     createVehicle(cmd[1].tointeger(), postemp[0]+5, postemp[1]+5, postemp[2]+5, 0.0, 0.0, 0.0);
	   }
	 }
	 else sendPlayerMessage(playerid, "** Sorry, you can't use this command (only admin)... **", colorGray);
	 break;
////////////////////////////////////////////////////////////////////////////////////////////////   
   case "/heal":
     //Admin-state check
	 if (isAdm[playerid].tostring() == "true")
	 {
	   setPlayerHealth(playerid, 100);
	   setPlayerArmour(playerid, 100);
	 }
	 else sendPlayerMessage(playerid, "** Sorry, you can't use this command (only admin)... **", colorGray);
	 break;
////////////////////////////////////////////////////////////////////////////////////////////////	 
   case "/sethp":
     //Admin-state check
	 if (isAdm[playerid].tostring() == "true")
	 {
	   //Check for number of words and hp
	   if ((cmd.len() != 3) || (cmd[2].tointeger() > 100))
	   {
	     sendPlayerMessage(playerid, "** Usage: /sethp [id] [1-100] **", colorGray);
	   }
	   else
	   {
	     setPlayerHealth(cmd[1].tointeger(), cmd[2].tointeger());
	   }
	 }
	 else sendPlayerMessage(playerid, "** Sorry, you can't use this command (only admin)... **", colorGray);
	 break;
////////////////////////////////////////////////////////////////////////////////////////////////
   case "/setarmor":
     //Admin-state check
	 if (isAdm[playerid].tostring() == "true")
	 {
	   //Check for number of words and hp
	   if ((cmd.len() != 3) || (cmd[2].tointeger() > 100))
	   {
	     sendPlayerMessage(playerid, "** Usage: /setarmor [id] [1-100] **", colorGray);
	   }
	   else
	   {
	     setPlayerArmour(cmd[1].tointeger(), cmd[2].tointeger());
	   }
	 }
	 else sendPlayerMessage(playerid, "** Sorry, you can't use this command (only admin)... **", colorGray);    
	break;	
////////////////////////////////////////////////////////////////////////////////////////////////
   case "/givemoney":
	 if (isAdm[playerid].tostring() == "true")
     {
	   if (cmd.len() != 3)
	   {
	     sendPlayerMessage(playerid, "** Usage: /givemoney [ID] [Money] **", colorGray)
	   }
	   else
	   {
         givePlayerMoney(cmd[1].tointeger(), cmd[2].tointeger());
	   }
	 }
	 else sendPlayerMessage(playerid, "** Sorry, you can't use this command (only admin)... **", colorGray);
	 break;
////////////////////////////////////////////////////////////////////////////////////////////////
   case "/setmoney":
	 if (isAdm[playerid].tostring() == "true")
     {
	   if (cmd.len() != 3)
	   {
	     sendPlayerMessage(playerid, "** Usage: /setmoney [ID] [Money] **", colorGray)
	   }
	   else
	   {
         setPlayerMoney(cmd[1].tointeger(), cmd[2].tointeger());
	   }
	 }
	 else sendPlayerMessage(playerid, "** Sorry, you can't use this command (only admin)... **", colorGray);
	 break;
////////////////////////////////////////////////////////////////////////////////////////////////
   case "/kick":
	 if (isAdm[playerid].tostring() == "true")
     {
	   if (cmd.len() != 3)
	   {
	     sendPlayerMessage(playerid, "** Usage: /kick [ID] [Reason] **", colorGray)
	   }
	   else
	   {
         if(isPlayerConnected(cmd[1].tointeger()))
		 {
		   sendMessageToAll("Player '" + getPlayerName(cmd[1].tointeger()) + "' has kicked. Reason: " + cmd[2], colorRed);
		   kickPlayer(cmd[1].tointeger(), true);
		 }
		 else
		 {
		   sendPlayerMessage(playerid, "** Invalid player ID **", colorGray);
		 }
	   }
	 }
	 else sendPlayerMessage(playerid, "** Sorry, you can't use this command (only admin)... **", colorGray);    
	break;	 
////////////////////////////////////////////////////////////////////////////////////////////////
   case "/ban":
	 if (isAdm[playerid].tostring() == "true")
     {
	   if (cmd.len() != 4)
	   {
	     sendPlayerMessage(playerid, "** Usage: /ban [ID] [Time in seconds] [Reason] (Time=0 for permanent) **", colorGray)
	   }
	   else
	   {
         if(isPlayerConnected(cmd[1].tointeger()))
		 {
		   sendMessageToAll("Player '" + getPlayerName(cmd[1].tointeger()) + "' has banned for" + cmd[2] + ". Reason: " + cmd[3], colorRed);
		   banPlayer(cmd[1].tointeger(), cmd[2].tointeger());
		 }
		 else
		 {
		   sendPlayerMessage(playerid, "** Invalid player ID **", colorGray);
		 }
	   }
	 }
	 else sendPlayerMessage(playerid, "** Sorry, you can't use this command (only admin)... **", colorGray);    
	break;
////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////Commands for easier developement///////////////////////////////
   case "/pos":
     //Admin-state check
	 if (isAdm[playerid].tostring() == "true")
	 {
	   local postemp = getPlayerCoordinates(playerid);
	   local rottemp = getPlayerHeading(playerid);
	   //Log result
	   log(postemp[0].tostring() + " " + postemp[1].tostring() + " " + postemp[2].tostring() + " " + rottemp.tostring());
	 }
     break;
////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////Test null command/////////////////////////////////////
   case "/test":
	break;
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////Execute, if invalid command/////////////////////////////////	
   case "default":
    sendPlayerMessage(playerid, "** Invalid command, type /help to list avalible commands **");
    break;
 }
}
addEvent("playerCommand", onPlayerCommand);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////playerDeath/////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function onPlayerDeath( playerid, killerid, killervehicle )
{
	if (killerid != 65535) 
	    sendMessageToAll("** " + getPlayerName(playerid) + " (" + playerid + ") has killed by " +  getPlayerName(killerid) + " (" + killerid + ") :C **", colorRed, true)
	else
	    sendMessageToAll("** " + getPlayerName(playerid) + " (" + playerid + ") has suicided :C **", colorRed, true);
	//Give to killer player's money
	givePlayerMoney(killerid, getPlayerMoney(playerid));
}
addEvent("playerDeath", onPlayerDeath);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////playerDisconnect///////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function onPlayerDisconnect ( playerid, reason )
{
  //If player is logged, save money to account
  if (isLog[playerid] == true)
  {
    local ini = EasyINI ("account/"+getPlayerName(playerid)+".ini");
	ini.setKey("General", "Money", getPlayerMoney(playerid).tostring());
  }
  //Null player variables
  isLog[playerid] = false;
  isAdm[playerid] = false; 
  inChk[playerid] = false;
  shownShop[playerid] = false;
  //Send message to all players, with reason
  if (reason == 0) sendMessageToAll("** Player '" + getPlayerName(playerid) + "' has disconnect from our server (Exit) :C **", colorRed, true)
  else sendMessageToAll("[FFFFFFFF]** Player '" + getPlayerName(playerid) + "' has disconnect from our server (Crash) :C **", colorRed, true);
}
addEvent("playerDisconnect", onPlayerDisconnect);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////enter-exit-CheckPoint/////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
function onPlayerEnterCheckpoint(playerid, checkpointId)
{
  //While player is in CheckPoint, variable is true
  inChk[playerid] = true;
  //If shop isn't already  show
  if (shownShop[playerid] == false)
  {
    shownShop[playerid] = true;
	sendPlayerMessage(playerid, "** Type /weapon to use weaponShop **", colorGray);
  }
}
addEvent("playerEnterCheckpoint", onPlayerEnterCheckpoint);

function onPlayerLeaveCheckpoint(playerid, checkpointId)
{
  //When he exit it - false
  inChk[playerid] = false;
  //Shop can be show again
  shownShop[playerid] = false;
}
addEvent("playerLeaveCheckpoint", onPlayerLeaveCheckpoint);

function buyCar(playerid, modelid, color1, color2, color3, color4)
{
    local carid = -1;
    foreach(i, MAX_CARS)
    {
        if(cCarID[i] == -1)
        {
            cCarID[i] = createVehicle (modelid, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, color1, color2 , color3, color4);
            carid = i;
            break;
        }
    }
    if(carid == -1) return 0;
    if(pCar1[playerid] == 0) pCar1[playerid] = carid;
    else if(pCar2[playerid] == 0) pCar2[playerid] = carid;
    else if(pCar3[playerid] == 0) pCar3[playerid] = carid
    cCarModel[carid] = modelid;
    cCarColor1[carid] = color1;
    cCarColor2[carid] = color2;
    cCarColor3[carid] = color3;
    cCarColor4[carid] = color4;
    local pos = getVehicleCoordinates(cCarID[carid]);
    cCarPosX[carid] = pos[0];
    cCarPosY[carid] = pos[1];
    cCarPosZ[carid] = pos[2];
    local rot = getVehicleRotation(cCarID[carid]);
    cCarAngleX[carid] = rot[0];
    cCarAngleY[carid] = rot[1];
    cCarAngleZ[carid] = rot[2];
    cCarDirtLevel[carid] = getVehicleDirtLevel(cCarID[carid]);
    cCarHealth[carid] = getVehicleHealth(cCarID[carid]);
    cCarEngineHealth[carid] = getVehicleEngineHealth(cCarID[carid]);
    cCarLocked[carid] = getVehicleLocked(cCarID[carid]);
    cCarParked[carid] = 0;
    cCarVariation[carid] = getVehicleVariation(cCarID[carid]);
    cCarSirenState[carid] = getVehicleSirenState(cCarID[carid]);
    cCarEngineState[carid] = getVehicleEngineState(cCarID[carid]);
    cCarLights[carid] = getVehicleLights(cCarID[carid]);
    cCarTaxiLights[carid] = getVehicleTaxiLights(cCarID[carid]);
    return ;
}

function saveCars()
{
    foreach(c, MAX_CARS)
    {
        if(cCarID[c] != -1)
        {
            cCarModel[c] = getVehicleModel(cCarID[c]);
            local color = getVehicleColor(cCarID[c]);
            cCarColor1[c] = color[0];
            cCarColor2[c] = color[1];
            cCarColor3[c] = color[2];
            cCarColor4[c] = color[3];
            local pos = getVehicleCoordinates(cCarID[c]);
            cCarPosX[c] = pos[0];
            cCarPosY[c] = pos[1];
            cCarPosZ[c] = pos[2];
            local rot = getVehicleRotation(cCarID[c]);
            cCarAngleX[c] = rot[0];
            cCarAngleY[c] = rot[1];
            cCarAngleZ[c] = rot[2];
            cCarDirtLevel[c] = getVehicleDirtLevel(cCarID[c]);
            cCarHealth[c] = getVehicleHealth(cCarID[c]);
            cCarEngineHealth[c] = getVehicleEngineHealth(cCarID[c]);
            cCarLocked[c] = getVehicleLocked(cCarID[c]);
            cCarVariation[c] = getVehicleVariation(cCarID[c]);
            cCarSirenState[c] = getVehicleSirenState(cCarID[c]);
            cCarEngineState[c] = getVehicleEngineState(cCarID[c]);
            cCarLights[c] = getVehicleLights(cCarID[c]);
            cCarTaxiLights[c] = getVehicleTaxiLights(cCarID[c]); 
            local ini = EasyINI ("cars/"+c+".oc");
            ini.setKey("General", "Model", cCarModel[c]);
            ini.setKey("Color", "Color1", cCarColor1[c]);
            ini.setKey("Color", "Color2", cCarColor2[c]);
            ini.setKey("Color", "Color3", cCarColor3[c]);
            ini.setKey("Color", "Color4", cCarColor4[c]);
            ini.setKey("Position", "PosX", cCarPosX[c]);
            ini.setKey("Position", "PosY", cCarPosY[c]);
            ini.setKey("Position", "PosZ", cCarPosZ[c]);
            ini.setKey("Rotation", "AngleX", cCarAngleX[c]);
            ini.setKey("Rotation", "AngleY", cCarAngleY[c]);
            ini.setKey("Rotation", "AngleZ", cCarAngleZ[c]);
            ini.setKey("Other", "DirtLevel", cCarDirtLevel[c]);
            ini.setKey("Other", "Health", cCarHealth[c]);
            ini.setKey("Other", "EngineHealth", cCarEngineHealth[c]);
            ini.setKey("Other", "Locked", cCarLocked[c]);
            ini.setKey("Other", "Variation", cCarVariation[c]);
            ini.setKey("Other", "SirenState", cCarSirenState[c]);
            ini.setKey("Other", "EngineStatus", cCarEngineStatus[c]);
            ini.setKey("Other", "Lights", cCarLights[c]);
            ini.setKey("Other", "TaxiLights", cCarTaxiLights[c]);
            ini.saveData(); 
        }
    }
    return 1;
}
        
function loadCars()
{
    foreach(c, MAX_CARS)
    {
        if (fexists("cars/"+c+".oc") == true)
        {
	         local ini = EasyINI ("cars/"+c+".oc");
            cCarModel[c] = ini.getKey("General", "Model").tofloat();
            cCarColor1[c] = ini.getKey("Color", "Color1").tofloat();
            cCarColor2[c] = ini.getKey("Color", "Color2").tofloat();
            cCarColor3[c] = ini.getKey("Color", "Color3").tofloat();
            cCarColor4[c] = ini.getKey("Color", "Color4").tofloat();
            cCarPosX[c] = ini.getKey("Position", "PosX").tofloat();
            cCarPosY[c] = ini.getKey("Position", "PosY").tofloat();
            cCarPosZ[c] = ini.getKey("Position", "PosZ").tofloat();
            cCarAngleX[c] = ini.getKey("Rotation", "AngleX").tofloat();
            cCarAngleY[c] = ini.getKey("Rotation", "AngleY").tofloat();
            cCarAngleZ[c] = ini.getKey("Rotation", "AngleZ").tofloat();
            cCarID[c] = createVehicle(cCarModel[c], cCarPosX[c], cCarPosY[c], cCarPosZ[c], cCarAngleX[c], cCarAngleY[c], cCarAngleZ[c], cCarColor1[c], cCarColor2[c], cCarColor3[c], cCarColor4[c]);
            cCarDirtLevel[c] = ini.getKey("Other", "DirtLevel").tointeger();
            setVehicleDirtLevel(cCarID[c], cCarDirtLevel[c]);
            cCarHealth[c] = ini.getKey("Other", "Health").tofloat();
            setVehicleHealth(cCarID[c], cCarHealth[c]);
            cCarEngineHealth[c] = ini.getKey("Other", "EngineHealth").tofloat();
            setVehicleEngineHealth(cCarID[c], cCarEngineHealth[c]);
            cCarLocked[c] = ini.getKey("Other", "Locked").tointeger();
            setVehicleLocked(cCarID[c], cCarLocked[c]);
            cCarVariation[c] = ini.getKey("Other", "Variation").tointeger();
            setVehicleVariation(cCarID[c], cCarVariation[c]);
            cCarSirenState[c] = ini.getKey("Other", "SirenState").tointeger();
            setVehicleSirenState(cCarID[c], cCarSirenState[c]);
            cCarEngineStatus[c] = ini.getKey("Other", "EngineStatus").tointeger();
            setVehicleEngineStatus(cCarID[c], cCarEngineStatus[c]);
            cCarLights[c] = ini.getKey("Other", "Lights").tointeger();
            setVehicleLights(cCarID[c], cCarLights[c]);
            cCarTaxiLights[c] = ini.getKey("Other", "TaxiLights").tointeger();
            setVehicleTaxiLights(cCarID[c], cCarTaxiLights[c]);
	         ini.saveData();
        }
    }
    return 1;
}

function isPlayerNearVehicle(playerid, vehicleid)
{
    local playerPos = getPlayerCoordinates(playerid);
    local vehiclePos = getVehicleCoordinates(vehicleid);
    return isPointInBall(playerPos[0], playerPos[1], playerPos[2], vehiclePos[0], vehiclePos[1], vehiclePos[2], 3.0);
}
    